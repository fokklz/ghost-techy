name: Build and Release Installer

on:
  push:
    paths:
      - "VERSION"
  pull_request:
    paths:
      - "VERSION"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_info.outputs.VERSION }}
      name: ${{ steps.get_info.outputs.NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.11.1"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install

      - name: Build ZIP
        run: yarn zip

      - name: Get Info from package.json
        id: get_info
        run: |
          VERSION=$(cat VERSION)
          NAME=$(jq -r .name package.json)
          echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "NAME=${NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{steps.get_info.outputs.name}}-${{ steps.get_info.outputs.version }}"
          path: dist/*.zip
          overwrite: true

  changelog:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      changes: ${{ steps.changelog.outputs.changes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check and create initial tag if none exist
        run: |
          git fetch --unshallow
          if [ -z "$(git tag)" ]; then
            echo "No tags found, creating initial tag v0.0.0."
            first_commit=$(git rev-list --max-parents=0 HEAD)
            echo "First commit is $first_commit"
            git tag v0.0.0 $first_commit
            git push origin v0.0.0
          else
            echo "Tags found, skipping initial tag creation."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create new tag
        id: new_tag
        run: |
          NEW_TAG=v${{ needs.build.outputs.version }}
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: "v${{ needs.build.outputs.version }}"
          excludeTypes: "docs,style"

      - name: Commit and Push Changelog
        run: |
          git add CHANGELOG.md || true
          git commit -m "docs: updated changelog for v${{ needs.build.outputs.version }}" || true
          git push origin main || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs:
      - build
      - changelog
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: "${{ needs.build.outputs.name }}-${{ needs.build.outputs.version }}"

      - name: Create Release
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "*.zip"
          artifactContentType: "application/zip"
          name: "Release v${{ needs.build.outputs.version }}"
          tag: "v${{ needs.build.outputs.version }}"
          body: ${{ needs.changelog.outputs.changes != '' && needs.changelog.outputs.changes || 'Nothing to display' }}
          token: ${{ github.token }}
